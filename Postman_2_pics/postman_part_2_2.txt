==========http://162.55.220.72:5005/first==========
+1. Отправить запрос.
+2. Статус код 200
+3. Проверить, что в body приходит правильный string.

==========http://162.55.220.72:5005/user_info_3==========
+1. Отправить запрос.

+2. Статус код 200

+3. Спарсить response body в json.
    const responseJson = pm.response.json();

+4. Проверить, что name в ответе равно name s request (name вбить руками.)
    pm.test("Check name", function () {
        pm.expect(responseJson.name).to.eql('Ivan');
    });

+5. Проверить, что age в ответе равно age s request (age вбить руками.)
    pm.test("Check age", function () {
        pm.expect(+responseJson.age).to.eql(17);
    });


+6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
    pm.test("Check salary", function () {
        pm.expect(responseJson.salary).to.eql(1000);
    });

+7. Спарсить request.
    const requestData = JSON.parse(JSON.stringify(pm.request.body.formdata))

+8. Проверить, что name в ответе равно name s request (name забрать из request.)
    pm.test("Check name to request", function () {
        pm.expect(responseJson.name).to.eql(reqName);
    });

+9. Проверить, что age в ответе равно age s request (age забрать из request.)
    pm.test("Check age to request", function () {
        pm.expect(responseJson.age).to.eql(reqAge);
    });

+10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
    pm.test("Check salary to request", function () {
        pm.expect(responseJson.salary).to.eql(+reqSalary);
    });

+11. Вывести в консоль параметр family из response.
    console.log(responseJson.family)

+12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
    pm.test("Check u_salary_1_5_year", function () {
        pm.expect(responseJson.family.u_salary_1_5_year).to.eql(+reqSalary*4);
    });

==========http://162.55.220.72:5005/object_info_3==========
+1. Отправить запрос.
    {{url}}/object_info_3?name=Ivan&age=17&salary=1000

+2. Статус код 200

+3. Спарсить response body в json.
    var respData = pm.response.json()

+4. Спарсить request.
    var requestData = pm.request.url.query.toObject()

+5. Проверить, что name в ответе равно name s request (name забрать из request.)
    pm.test("Check name", function () {
        pm.expect(respData.name).to.eql(requestData.name);
    });

+6. Проверить, что age в ответе равно age s request (age забрать из request.)
    pm.test("Check age", function () {
        pm.expect(respData.age).to.eql(requestData.age);
    });

+7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
    pm.test("Check salary", function () {
        pm.expect(respData.salary).to.eql(+requestData.salary);
    });

+8. Вывести в консоль параметр family из response.
    console.log(respData.family)

+9. Проверить, что у параметра dog есть параметры name.
    let respData = pm.response.json()
    let respDog = respData.family.pets.dog
    let respStringDog = JSON.stringify(respDog)

    pm.test("TEST: respDog include name", function () {
        pm.expect(respStringDog).to.include("name");
    });

+10. Проверить, что у параметра dog есть параметры age.
    let respData = pm.response.json()
    let respDog = respData.family.pets.dog
    let respStringDog = JSON.stringify(respDog)

    pm.test("TEST: respDog include age", function () {
        pm.expect(respStringDog).to.include("age");
    });

+11. Проверить, что параметр name имеет значение Luky.
    let respData = pm.response.json()
    let respDog = respData.family.pets.dog
    let respDogName = respDog.name

    pm.test("TEST: respDogName have name 'Luky'", function () {
        pm.expect(respDogName).to.include('Luky');
    });


+12. Проверить, что параметр age имеет значение 4.
    let respData = pm.response.json()
    let respDog = respData.family.pets.dog
    let respDogAge = respDog.age

    pm.test("TEST: respDogName have age '4'", function () {
        pm.expect(respDogAge).to.eql(4);
    });


==========http://162.55.220.72:5005/object_info_4==========
+1. Отправить запрос.

+2. Статус код 200

+3. Спарсить response body в json.
respData = pm.response.json()

+4. Спарсить request.
    let reqData = pm.request.url.query.toObject()

+5. Проверить, что name в ответе равно name s request (name забрать из request.)
    let respData = pm.response.json()
    let respName =  respData.name

    let reqData = pm.request.url.query.toObject()
    let reqName = reqData.name

    pm.test("Check name", function () {
        pm.expect(respName).to.eql(reqName);
    });


+6. Проверить, что age в ответе равно age из request (age забрать из request.)
    let respData = pm.response.json()
    let respAge =  respData.age
    let reqData = pm.request.url.query.toObject()
    let reqAge = reqData.age

    pm.test("Check age from request to response", function () {
        pm.expect(respAge).to.eql(+reqAge)
    });

+7. Вывести в консоль параметр salary из request.
    console.log('request salary:', +reqData.salary)

+8. Вывести в консоль параметр salary из response.
    console.log('response salary:', respData.salary)

+9. Вывести в консоль 0-й элемент параметра salary из response.
    console.log('response salary [0]:', +respData.salary[0])

+10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
    console.log('response salary [1]:', +respData.salary[1])

+11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
    console.log('response salary [2]:', +respData.salary[2])

+12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
    let respData = pm.response.json()
    let reqData = pm.request.url.query.toObject()
    
    pm.test("Check respSalary[0]==requestSalary", function () {
        pm.expect(+respData.salary[0]).to.equal(+reqData.salary)
    });

+13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
    let respData = pm.response.json()
    let reqData = pm.request.url.query.toObject()
    
    pm.test("Check respSalary[1] == reqSalary*2", function () {
        pm.expect(+respData.salary[1]).to.eql(+reqData.salary*2)
    });

+14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
    let respData = pm.response.json()
    let reqData = pm.request.url.query.toObject()
    
    pm.test("Check respSalary[2]==reqSalary*3", function () {
        pm.expect(+respData.salary[2]).to.eql(reqData.salary*3)
    });

+15. Создать в окружении переменную name
    pm.environment.set("name", "Danila");

+16. Создать в окружении переменную age
    pm.environment.set("age", 18)

+17. Создать в окружении переменную salary
    pm.environment.set("salary", 1500)

+18. Передать в окружение переменную name
    var nameEnv = pm.environment.get("name")

+19. Передать в окружение переменную age
    var ageEnv = pm.environment.get("age")

+20. Передать в окружение переменную salary
    var salaryEnv = pm.environment.get("salary")

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
    for (let i=0; i < respSalary.length; i++) {
        console.log(respSalary[i]);
    }

=============================================================================

http://162.55.220.72:5005/user_info_2
+1. Вставить параметр salary из окружения в request
+2. Вставить параметр age из окружения в age
+3. Вставить параметр name из окружения в name
+4. Отправить запрос.
+5. Статус код 200
+6. Спарсить response body в json.
    let respData = pm.response.json()
+7. Спарсить request.
    let reqName = reqData.get('name')

+8. Проверить, что json response имеет параметр start_qa_salary
    let respData = pm.response.json()

    pm.test("Check json response имеет параметр start_qa_salary", function() {
        pm.expect(respData).to.have.any.keys("start_qa_salary")
    });

+9. Проверить, что json response имеет параметр qa_salary_after_6_months
    let respData = pm.response.json()

    pm.test("Check json response имеет параметр 'qa_salary_after_6_months'", function () {
        pm.expect(respData).to.have.any.keys("qa_salary_after_6_months")
    });

+10. Проверить, что json response имеет параметр qa_salary_after_12_months
    pm.test("Check json response имеет параметр 'qa_salary_after_12_months'", function () {
        pm.expect(respData).to.have.any.keys("qa_salary_after_12_months")
    });

+11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
    pm.test("Check json response имеет параметр 'qa_salary_after_1.5_year'", function () {
        pm.expect(respData).to.have.any.keys("qa_salary_after_1.5_year")
    });

+12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
    pm.test("Check json response имеет параметр 'qa_salary_after_3.5_years'", function () {
        pm.expect(respData).to.have.any.keys("qa_salary_after_3.5_years")
    });

+13. Проверить, что json response имеет параметр 
    pm.test("Check json response имеет параметр 'person'", function () {
        pm.expect(respData).to.have.any.keys("person")
    });

+14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
    let reqData = pm.request.body.formdata
    let reqSalary = +reqData.get("salary")

    pm.test("Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)", function () {
        pm.expect(respData.start_qa_salary).to.eql(reqSalary)
    });

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
    pm.test("Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)", function () {
        pm.expect(respData.qa_salary_after_6_months).to.eql(reqSalary*2)
    });

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
    pm.test("Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)", function () {
        pm.expect(respData.qa_salary_after_12_months).to.eql(reqSalary*2.7)
    });

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
    pm.test("Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)", function () {
        pm.expect(respData['qa_salary_after_1.5_year']).to.eql(reqSalary*3.3)
    });

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
    pm.test("Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)", function () {
        pm.expect(respData['qa_salary_after_3.5_years']).to.eql(reqSalary*3.8)
    });

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
    pm.test("Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)", function () {
        pm.expect(respData['person']['u_name'][1]).to.eql(reqSalary)
    });

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
    pm.test("Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)", function () {
        pm.expect(respData['person']['u_name'][1]).to.eql(reqSalary)
    });

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
    pm.test("Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)", function () {
        pm.expect(respData['person']['u_salary_5_years']).to.eql(reqSalary*4.2)
    });

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
    let respData = pm.response.json()
    let respU_name = respData.person.u_name

    let i = respU_name
    for (let n of i){
        console.log('--->', n)
    }

